name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "README.md"

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint Code
        run: echo "Linting repository code"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery (Build and Push Docker Image to Amazon ECR)
    runs-on: ubuntu-latest
    needs: integration
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build Docker Image and Push to Amazon ECR Repository
          # So that Amazon ECS can use it to deploy the application to ECS Cluster
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-to-ecs:
    name: Continuous Deployment (Deploy to Amazon EC2)
    runs-on: ip-172-31-23-226
    needs: build-and-push-ecr-image
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull Latest Docker Images from Amazon ECR
        run: |
          # Pull the latest Docker Image from Amazon ECR
          # So that it can be deployed to Amazon ECS Cluster
          echo "Pulling the latest Docker Image from Amazon ECR"
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      # - name: Stop and Remove Existing Docker Containers if Running
      #   run: |
      #     # Stop and Remove the existing Docker Containers
      #     # So that the new Docker Image can be deployed to Amazon ECS Cluster
      #     echo "Stopping and Removing the existing Docker Containers"
      #     docker ps -q --filter "name=${{ secrets.ECR_REPOSITORY_NAME }}" | grep -q . && docker stop ${{ secrets.ECR_REPOSITORY_NAME }} && docker rm -fv ${{ secrets.ECR_REPOSITORY_NAME }}

      - name: Run the Docker Container
        run: |
          # Run the Docker Container
          # So that the application can serve the incoming requests (users)
          echo "Running the Docker Container"
          docker run -d -p 8080:8080 --ipc=host "--name=${{ secrets.ECR_REPOSITORY_NAME }}" -e "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" -e "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -e "AWS_REGION=${{ secrets.AWS_REGION }}" ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"

      - name: Clean Up Previous Images and Containers
        run: |
          # Clean up the previous Docker Images and Containers
          # So that the new Docker Image can be deployed to Amazon ECS Cluster
          echo "Cleaning up the previous Docker Images and Containers"
          docker system prune -f
