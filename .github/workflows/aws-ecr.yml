name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "README.md"
      - "docs/**"
  workflow_dispatch:  # Allow manual triggering

env:
  ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8

      - name: Lint Code
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run unit tests
        run: pytest

  build-and-push-ecr-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: integration
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker Image and Push to Amazon ECR Repository
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-ecs:
    name: Deploy to Amazon ECS
    runs-on: self-hosted
    needs: build-and-push-ecr-image
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull Latest Docker Image
        run: |
          echo "Pulling the latest Docker Image from Amazon ECR"
          docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:latest

      - name: Stop and Remove Existing Container
        run: |
          if docker ps -a --format '{{.Names}}' | grep -q "${{ env.ECR_REPOSITORY_NAME }}"; then
            echo "Stopping and removing existing container..."
            docker stop ${{ env.ECR_REPOSITORY_NAME }} || true
            docker rm ${{ env.ECR_REPOSITORY_NAME }} || true
          else
            echo "No existing container found."
          fi

      - name: Run the Docker Container
        run: |
          docker run -d \
            -p 8080:8080 \
            --name=${{ env.ECR_REPOSITORY_NAME }} \
            -e "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e "AWS_REGION=${{ env.AWS_REGION }}" \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_NAME }}:latest

      - name: Verify Deployment
        run: |
          echo "Waiting for application to start..."
          sleep 10
          
          if curl -s http://localhost:8080/health || curl -s http://localhost:8080/ping; then
            echo "Application is running!"
          else
            echo "Application health check failed"
            docker logs ${{ env.ECR_REPOSITORY_NAME }}
            exit 1
          fi

      - name: Clean Up Previous Images
        run: |
          echo "Cleaning up unused Docker images"
          docker image prune -f --filter "until=24h" || true